import pytest


@pytest.fixture
def user_manager():
    from user import UserManager

    my_user_manager = UserManager()
    return my_user_manager


@pytest.fixture
def course_manager():
    from course import CourseManager

    my_course_manager = CourseManager()
    return my_course_manager


@pytest.fixture
def teacher_list(user_manager):
    user_manager.create_a_user("Teacher1", "pwd1", "teacher")
    teacher_ids = [1]
    teacher_list = user_manager.find_users(teacher_ids)
    return teacher_list


@pytest.fixture
def new_course(teacher_list):
    from course import Course

    new_course = Course(1, "COSC 381", "W24", teacher_list)
    return new_course


def test_generate_id(course_manager):
    # arrange
    new_count = course_manager.counter

    # act
    result = course_manager.generate_id()

    # assert
    assert result == (new_count + 1)


def test_find_a_course_empty(course_manager):

    # act
    result = course_manager.find_a_course(3)

    # assert
    assert result == None


def test_find_a_course(course_manager, teacher_list):
    # arrange
    new_course_id = course_manager.create_a_course(
        "COSC 381", "W24", teacher_list
    )

    # act
    result = course_manager.find_a_course(new_course_id)

    # assert
    assert result.course_id == new_course_id
    assert result.course_code == "COSC 381"
    assert result.semester == "W24"
    for teacher in result.teacher_list:
        assert teacher.type == "teacher"


def test_import_students(user_manager, new_course):
    # arrange
    user_manager.create_a_user("Student1", "pwd2", "student")
    user_manager.create_a_user("Student2", "pwd3", "student")
    user_manager.create_a_user("Student3", "pwd4", "student")
    student_ids = [2, 3, 4]
    student_list = user_manager.find_users(student_ids)

    # act
    new_course.import_students(student_list)

    # assert
    for student in new_course.student_list:
        assert student.type == "student"


def test_create_an_assignment(new_course):
    # arrange
    new_count = new_course.assignment_counter
    new_index = len(new_course.assignment_list)

    # act
    new_course.create_an_assignment("Dec 22")

    # assert
    assert new_course.assignment_counter == (new_count + 1)
    assert len(new_course.assignment_list) == (new_index + 1)
    assert new_course.assignment_list[new_index].due_date == "Dec 22"


def test_generate_assignment_id(new_course):
    # arrange
    new_count = new_course.assignment_counter

    # act
    result = new_course.generate_assignment_id()

    # assert
    assert result == (new_count + 1)


def test_find_a_course_behavior(mocker, course_manager, teacher_list):
    # arrange
    new_course_id = course_manager.create_a_course(
        "COSC 381", "W24", teacher_list
    )
    mocked_find_a_course = mocker.patch("course.CourseManager.find_a_course")

    # act
    result = course_manager.find_a_course(new_course_id)

    # assert
    mocked_find_a_course.assert_called_with(new_course_id)


def test_import_students_behavior(mocker, user_manager, new_course):
    # arrange
    user_manager.create_a_user("Student1", "pwd2", "student")
    user_manager.create_a_user("Student2", "pwd3", "student")
    user_manager.create_a_user("Student3", "pwd4", "student")
    student_ids = [2, 3, 4]
    student_list = user_manager.find_users(student_ids)
    mocked_import_students = mocker.patch("course.Course.import_students")

    # act
    new_course.import_students(student_list)

    # assert
    mocked_import_students.assert_called_with(student_list)


def test_create_an_assignment_behavior(mocker, new_course):
    # arrange
    new_count = new_course.assignment_counter
    new_index = len(new_course.assignment_list)
    mocked_create_an_assignment = mocker.patch("course.Course.create_an_assignment")

    # act
    new_course.create_an_assignment("Dec 22")

    # assert
    mocked_create_an_assignment.assert_called_with("Dec 22")


def test_create_a_course(mocker, course_manager, teacher_list):
    # arrange
    new_index = len(course_manager.course_list)
    new_count = course_manager.counter
    mocked_create_a_course = mocker.patch("course.CourseManager.create_a_course")

    # act
    new_course_id = course_manager.create_a_course(
        "COSC 381", "W24", teacher_list
    )

    # assert
    mocked_create_a_course.assert_called_with("COSC 381", "W24", teacher_list)